from dataclasses import dataclass
from enum import Enum
from typing import List

import pinecone


class RowType(Enum):
    BLOCK = 'block'

@dataclass
class Row:
    id: str
    embedding: List[float]

    owner: str
    type: RowType
    date_day: int

    integration: str
    document_id: str
    block_label: str

    def to_metadata_dict(self):
        return {
            'owner': self.owner,
            'type': self.type.value,
            'date_day': self.date_day,
            'integration': self.integration,
            'document_id': self.document_id,
            'block_label': self.block_label,
        }

@dataclass
class Filter:
    owner: str
    type: set[RowType] = None
    min_date_day: int = None
    max_date_day: int = None
    integration: set[str] = None
    document_id: set[str] = None
    block_label: set[str] = None

    def to_dict(self):
        filter = {
            'owner': self.owner
        }
        if self.type:
            filter['type'] = {
                '$in': [t.value for t in self.type]
            }
        if self.min_date_day or self.max_date_day:
            date_day = {}
            if self.min_date_day:
                date_day['$gte'] = self.min_date_day
            if self.max_date_day:
                date_day['$lte'] = self.max_date_day

            filter['date_day'] = date_day
        if self.integration:
            filter['integration'] = {
                '$in': list(self.integration)
            }
        if self.document_id:
            filter['document_id'] = {
                '$in': list(self.document_id)
            }
        if self.block_label:
            filter['block_label'] = {
                '$in': list(self.block_label)
            }
        return filter

class Pinecone:
    def __init__(self, api_key: str, environment: str, index_name: str = 'beta'):
        pinecone.init(api_key=api_key, environment=environment)
        indexes = pinecone.list_indexes()
        if indexes and index_name in indexes:
            self._index = pinecone.Index(index_name=index_name)
        else:
            pinecone.create_index(
                name=index_name, 
                dimension=1536, 
                metadata_config={
                    'indexed': ['owner', 'type', 'date_day', 'integration', 'document_id', 'block_label']
                }
            )
            self._index = pinecone.Index(index_name=index_name)
        
    def _delete_old_vectors(self, rows: List[Row]) -> bool:
        if not (self._index and rows and len(rows) > 0):
            return False
        
        owners = set([row.owner for row in rows])
        document_ids = set([row.document_id for row in rows])

        delete_response = self._index.delete(
            filter={
                'owner': {
                    '$in': list(owners)
                },
                'document_id': {
                    '$in': list(document_ids)
                }
            }
        )
        print('delete response!')
        print(delete_response)

        return True

    def _batched_upsert(self, vectors: List[dict], batch_size: int = 100) -> bool:
        if not vectors or len(vectors) < 1:
            return False
        
        len_vectors = len(vectors)
        for batch_index in range(0, len_vectors, batch_size):
            upsert_response = self._index.upsert(vectors=vectors[batch_index:batch_index + batch_size])
            print(upsert_response)
            if hasattr(upsert_response, 'upserted_count') and upsert_response.upserted_count >= min(len_vectors - batch_index, batch_size):
                print(upsert_response.upserted_count)
            else:
                return False
        return True

    def upsert(self, rows: List[Row]):
        if not (self._index and rows and len(rows) > 0):
            return None
        vectors = []
        owners = set()
        document_ids = set()
        for row in rows:
            owners.add(row.owner)
            document_ids.add(row.document_id)

            vectors.append({
                'id': row.id,
                'values': row.embedding,
                'metadata': row.to_metadata_dict()
            })
            print(row.to_metadata_dict())
        
        deleted = self._delete_old_vectors(rows)
        upserted = self._batched_upsert(vectors=vectors)
        return deleted and upserted
    
    def query(self, embedding: List[float], query_filter: Filter, k: int = 5):
        if not (self._index and embedding and len(embedding) > 0):
            return None

        query_response = self._index.query(
            vector=embedding,
            top_k=k,
            filter=query_filter.to_dict(),
            include_metadata=True,
            include_values=True
        )

        return query_response.get('matches', None) if query_response else None
    
    def fetch(self, ids: List[str]):
        if not (self._index and ids and len(ids) > 0):
            return None
        
        fetch_response = self._index.fetch(ids=ids)
        return fetch_response.get('vectors', None) if fetch_response else None

pcone = Pinecone(api_key='0ca39def-1df8-46fd-8c26-abdbe593623a', environment='us-east1-gcp')
ids = ["01GWQDMHK0QD1A161YEWCZ8CDK", "01GWQSH98C0EY6GZKHGQMGD2AV", "01GX4DVCJZSKJDS0VH0KSMSQJ2", "01GWQDEPXP22T7ZV43QB7EDENN", "01GX4DTD5M6BGK4CHW00CDP5XD", "01GX4DR1AQE6YDY62JESDG8166", "01GX4DV7TSDHACH1YX0SEQYVSS", "01GWQDHY101PCE1218CYY7VX1P", "01GWQSH1C3ZNPQZ638AR7D17N2", "01GWQDNGMEGB7P4EBYGCVA0TEE", "01GWQDKG6Z4PMW6P3P27SMKRHG", "01GX4DPXZY5JM8F2WPMN7JRVDW", "01GX4DSRH9TKFNFWJ20B8G8KG3", "01GX4DPY66A7NV72HHCX6PZQX6", "01GX48BP9M24ZB0SPQ55VY1P77", "01GWQSH1H6XZW7R28K5HFNM1WX", "01GWQDJ039VZ6G1CV03NWEY2DV", "01GWQDF0V5KM8Q8V45HFTGMX61", "01GWQSHMD9HA3S98VCWGF1QWWE", "01GWQDQC3G5RF7FHRKYMRWZT2E", "01GX48C90P14WJZ0C7E3XVWJ07", "01GWQDFMAYQZ2HZX88FVCGRDBY", "01GX4DPF662FTJQAZTPS1SAZBA", "01GWQDGEQ2PX7767XY4FGRWMET", "01GWQDK8E8F7KTW45SC0MR2QJZ", "01GX4DW5GY4YSQ497EASKYPD31", "01GWQDMS9K330N21VQ75B309CN", "01GWQDFM421CQYMR4SPBSYXD9S", "01GWQDNXJGJGWJ7M9SF2HNZGBD", "01GWQDHC0P62HRSXF3KFNP5VG6", "01GWQSHDJTGZH4D485SM1405K2", "01GX4DW5334MJPQE2FJZBB25RS", "01GWQDSRMSNS28CSMKDT7DGF5Q", "01GWQDK7R903AASSCZE4A6VR26", "01GX4DRZ85BEENS6QQWGJ4QMMQ", "01GX4DWN0QQ6W8N85Z0QDRWHMA", "01GX4DRCP77DTHZH83V39AYPH1", "01GWQDHY696QBDHHEZQJJST4QG", "01GX48CGD8823YPSG6YS35Y951", "01GX4DWFS2AED5VK2HNMTTW5RT", "01GX48C352MCWKJN86MSD1645D", "01GWQDEMBPPW1TRA7WS2QC25SD", "01GWQDJ5FXWXBWW1R60GV80SYT", "01GWQDEKXWKS14ZF7CRT80NTBX", "01GX4DSBCKV9Y619FWK5WM6F9G", "01GWQSHD6WTTJB0NG90BN4X73F", "01GWQDN98RD58078HPEKG9G6HP", "01GWQDHXJ8TJKY9C8Q7TDSDEHV", "01GWQSHDF467CT21KX55KQM3HR", "01GWQDS9JTKBXSAZ3EB0KSY8VP", "01GWQDF8AFTK2R8THARD1E4DF2", "01GWQDNGQA1HKQ2FMR8XKT0E1H", "01GX48DCZNGHSMHWWTCPYVVR25", "01GWQDKX8YN6MZ8RN5VNCC471K", "01GWQDEPDC5WHEC14AF0FJ1GA7", "01GX4DPSAY005TRXTMDRSG3H3R", "01GWQDGMGNQ1AX299VW76YXX4K", "01GWQDF8437MHW99ZQM1WBZY33", "01GX4DVHDVGAY0DNFW9GCNDGY0", "01GX48CFZN9RMX3S2P3HGYTVPX", "01GWQDRNCCVRD0EH5TS96NM9EK", "01GX4DPBXE0BQ7NS8WMB6SK216", "01GX4DW8QJSGQFN5K15F263JQD", "01GX4DVH65MB3BHNN2XS5TTT3B", "01GWQDJTN4JXVC5JYQ62VFPWPZ", "01GWN9Z9HCEFTPRABCG9Z97EBY", "01GX4DPBCWE6TW47KFAYFB30YN", "01GWQDPB56DANYTNFZJ52R3272", "01GX4DSQWTSKEPZ4N3T409W757", "01GX4DVW01CK515EGDQ344T953", "01GWQDF08WWGV2KMC6VECXV3DZ", "01GWQDJT3T790Y43XQEWBB631M", "01GWQDK7ZK1ZRH5MV1V7ZX7PX3", "01GX4DPBFHYBQ90MRMXDBSCCX7", "01GWQDK7D0ZB5MNX9AX4V4CC5R", "01GWQDNG5NP8G3P9J6ZZ65ATHT", "01GWQDKQQ7ER2NBVKWTYCTNGG1", "01GWQDGEYRV97CQWE89FT9PQH6", "01GWN9Z9TF5WAK5G3ED8Z3FNQ6", "01GX48CTRS6SEY7H16ZWW24T85", "01GX4DWFWZ7XFQWXZCHF6KQWPQ", "01GWQDM4ZSRP0C4FZ2AZ0MTD4Y", "01GWQSHMM5SQXK4D0RMKJ06NEF", "01GWN9Z9PM1DN7B84NAJHT77W9", "01GWQDP520VQ6E5VQZ3CSHZP6G", "01GWQDRPSZ01KC9F1C8GK25C07", "01GWN9Z9M2FCVB5VRCCV6BCRV4", "01GX4DSB47MBXNYZTKEXHA3A4H", "01GX4DVCYR4AD5BGZ9KKNEEGMT", "01GX4DPY31DB3W3RNTC3FKA9YK", "01GWQDNXG0G9MEX88FKNFYQD91", "01GWQDRN4300E5CHRT05CEK4TJ", "01GX4DT7NYMMK7CM4BJCY9DDSS", "01GX4DT751R9Y26TFYZ0CPGCMQ", "01GWQDFZGJGP848995G578ARQJ", "01GWQDMBRNMNVNY2W45NP5W1CR", "01GX4DS5SHHJB029M0W2CSE2KQ", "01GX4DPM5XGDJM7RX600FBTTXE", "01GWQDENHGKJHGQP17SCQ4CXN6", "01GWQDGZ1VC8SQPZHMEKA1KRJM", "01GWQDSS4J73BTPENWAE5MJAT4", "01GWQDF8HC13D271MA2JEFTHM9", "01GWQDNG87KPZ1XBCDH35QQHMB", "01GWQDJS7PHFWT3A8MCNCVE56J", "01GWQDP4JFWA3M7PYSP709MHRD", "01GWQDSR0CCT0AH84NC4XKP1AQ", "01GX4DWTME557DVE2AVGM3B14T", "01GX48CZZMPZP8CKXVAC5T6K4M", "01GWQDF8M415Z4PVPGV6WQVD8V", "01GWQDJBY1KEMR2CFPR2K35E8Y", "01GWQDN23AZSQT6NSC30P3YQ1M", "01GWQ0XJD35T6J9TD4VT3CM4NB", "01GWQDJTR4WJDRCF6XESCGZ53A", "01GWQDENE94BGK8HCQ4P0YB534", "01GX4DTQEBV34X5HBYJYJ6Y35S", "01GX4DPSDHG87CRMQ1QF5TCVWA", "01GX4DVVT07A7B6TV40P933XEN", "01GX4DR7D0RQ61SM6SJ61SH6PK", "01GWQDG7Z1CSSRWZM9VMKR8PJW", "01GWQDJS02HTQTBJ864BK51986", "01GX4DQ8301RKK8JMMDV0RE9RX", "01GWQDPYPARRHRMW3MB9N84SQE", "01GX4DSAQ4ARTW09Y2QC71AB37", "01GWQDM5HAEACTSN4VZH8DA93R", "01GWQDRPEF2876VZ5FGFEYX651", "01GWQDGF9YS44Q7T21Z7VBH991", "01GWQDGNGZ825H71RJXPDGA1TV", "01GWNGXDFKKT8B7P2XPR7YNQWS", "01GX4DRZKX933KEX72NCMYG2D4", "01GX48BY10FDXDKR2PYMX865XH", "01GWQDGFKFQ5Y3YMENG2FFMAMQ", "01GWQDJS4QYQDS1SDDAC88PYSP", "01GX4DW99MMNKA55REWF8NE6Z7", "01GX4DRJ8451E07RGPF8G0PS5A", "01GWQDMB6F2X2AV0QA0JP09R6S", "01GX4DQ7VTMTPDY6APZCGAJK14", "01GX4DPMP5E9AK82KZFETMJ39M", "01GX4DTQTP3ZMDD5Z84XJNWQ92", "01GWQDF8RHC1MNQF1SPRRTK3HH", "01GWQSH9MS144MN774PH94NNJZ", "01GX48CZX0712RPHDZRH9SYP5J", "01GWQDNQ7181CRYFSE2S8F3QNY", "01GX4DVYK7YQJWQVWJ71TW9M5X", "01GWQDHD10QADJYCKGNV78AG5S", "01GWQDG0HCPXCNNRNZR1ZDKYEJ", "01GWQDGG0P38GGKKAK1J03GN7Y", "01GWQDF0EHPQ7V1SS6SSQZSD4K", "01GWQDJBJ7G4BW8A7W8QWE28RY", "01GX4DVN7JCK3MWJFZTARRDYP2", "01GX4DP6908EVSA3JBDH28S0GK", "01GX4DQGWRD41KCYSDPGFZSJFD", "01GX4DRS6VN8MF8Y4C0JZYW9RV", "01GWQDGF1EKH3WVT21MMRKJ4WQ", "01GWQDQWTDBJPS3QJAW0G4XNP3", "01GWQDS8T79X5HGPB59C6JV5P5", "01GWQDS9GB3T4HR7FG9VQMRMDK", "01GWQDR4K9MR5JZSWWATF6TGKS", "01GX48C3B6WHHNMRFVC42F9X42", "01GWQDF01VE8YG77AAF0FKMMDD", "01GWQDF8D4JV7ZVQDAH1A92WVF", "01GX4DRRPF1WV57K3RQJET97HV", "01GWQSH3VP8VP0YK5YDXJJGV2K", "01GWQDRCYNXV4KSCHT8BYBRNYM", "01GX4DR6N09PP10MX348AJ98M3", "01GX4DQ2TV239KXE9DY8PA8NY0", "01GX48BY3P8HGFEX7SP028N31M", "01GWQSGSCCXC89CGJF7C969KXN", "01GX48C3JMHNMXVB0K73J5GW8D", "01GX48CZNQYP2XWZ334VFVBPHJ", "01GX4DT7SFM2S88C6TYTE43QQH", "01GWQDQWBS53CJ2MG676XSKS1J", "01GX4DR1DDYGZ6HZKJQKECZFC9", "01GWQDHYZARJPMSZFVNY9WXENA", "01GX48DCWQX8HB1H6N0HR9AZ1B", "01GWQDEN694N8440HA1QNVK9VR", "01GWQDP4S05RKG4M3ZJHJ97CSM", "01GX4DVVX1QQ7H16JFWB1P9SAG", "01GWQDPBHQ4QR36N94XKXAGS2K", "01GWQDQCYEFSW4SWS286XJ1RXQ", "01GX4DXDH38EG6JVB3XPZYX4JD", "01GX4DP1SXTHKCXGTRHVGV6NDA", "01GX4DQC784ZY9AJKA4S32XCMG", "01GX4DWT0JPKC9VRNG788YJCHG", "01GWQDSA0JPA3YVVH441FB1MA8", "01GX4DWN8S36H0HB5Z8EDA3P3K", "01GX4DP2FWRQRB8SR171P5D0GG", "01GWQDM5KZY36D4NMNC64RBKV5", "01GWQDQ61CA974THEQV66A4X0M", "01GX4DT71VYXVFA4Q5YFWD4TVB", "01GWQDMRMY45F2SEHXV41S35DV", "01GX4DP28V69R2XV394VPA930R", "01GX48CTNS3BA8NPJS4YQG8JGE", "01GWQDN0TZHRJDCQAX3MPQXJDM", "01GX4DRHY0HARPGJ91Y9CR8059", "01GWQDHCE9SWR2FH1AEZVVZDPQ", "01GX4DW2GVVM78NQY392GZGX5F", "01GX4DWGBZ8EBX2BGRNR5F4089", "01GX4DSJ35AD9Y5M5Q4XTT14DR", "01GX4DT6QESZGTHS6X056S9HH1", "01GX4DT7JGXZM98F6SJ37V7HZ9", "01GWQDHWCG5YDN4P8QKFDFWGGC", "01GX4DV4GDCEKT357PBH0APRR2", "01GWQDPQ2Q7KQ6EPCKFDEQNDMX", "01GWQDJ6AT0F47X91411ZGVMBZ", "01GWQDPXHMH2K3EBCZEQ7ZY1ZJ", "01GX4DP0XPG96EDMKMP89GH84F", "01GWQDJH4DAN402SSMWM35MD0T", "01GX4DPMG7T1VM82W5JYNFJ7QH", "01GWQDJJA1EE3TQSNHWHX2R6GR", "01GWQDJJT9E6WK6NFX4TACYJ35", "01GWQDFZS87GFCWXN1TT4J1JRN", "01GWQDS009E430AKS78KAJKQTS", "01GWQDQVGRS1V4Y5PSK6VBCPVW", "01GX4DQNW5MD03KVHDPJH1P8JY", "01GX4DQX1WARM4N647F5AGZFB1", "01GWQDR4385KBGZBQEKAQA205E", "01GWQDQKADFMJSH82DDCV570DT", "01GX4DVRX76GF3C5DP697FQXDR", "01GWQDK7MDC7NYN7RTEDPX1TR5", "01GWQDRY2J75MFRSB8K8T0XJM2", "01GWQDRNME19MCPVQE2RK1N0AJ", "01GWQDRZX1B41QXZ9A9NNTPSBD", "01GWQDHVXVFBX3QJS09XPV9KSR", "01GWQDKQHVZCP72RXPKSQZWBM7", "01GWQDSFGQF6C1E5S5WYM3F13T", "01GWQDSQXFSMXY26XX2KK9C49S", "01GWQDKX6CAW50S8KFM3TNG3AW", "01GWQSH1ENAJW2D3MJ5WD0VJG4", "01GX48C94WA00CNAF1AXHATBD0", "01GWQDMRWBFT9QYPZ9D1CEEZFS", "01GX48CT914MPATX6BJJHXWDZQ", "01GWNGXDA5XMCXXHV0Z3PKGTWP", "01GWQDN1AYACDDFNABBFKT5TZX", "01GX4DSHZS2TYY2W3E33YGXHF1", "01GWQ0XJX3QZCQJ3H4JCR15ZRR", "01GWQDNGDDSN21X2D789DWXWGM", "01GX4DQP3ERRFC5A49NBMEGD0J", "01GWQDG7WET3086MS1VM79QHBQ", "01GWQDQWGCGCZHVTY09ZC6E95J", "01GWQDP3RPQR0HV75K3JZJRYT1", "01GWQDJTJY50VDHQF1J0MX4PHM", "01GX4DVH9DSKFT8WHVDKPX1GWX", "01GWQDJK5X8VM7SFKJ7PPFA7F1", "01GWQDPPMGH9M98MZXQP21DBRP", "01GX48D7DDFC8RB89F20PWFA4V", "01GWN9GS1E9F3N0W4GV96GXZZJ", "01GX4DP6BSNK6EXMDA24BF3N7C", "01GX4DPFFVAAGMRKSMH91XQEEN", "01GWQDEZVA1WGCA57T93XKCZDA", "01GWQDJSQ9NC5Y08MHT1C3HFY5", "01GWQDJTVGC0J9V44ZPFBCBFZR", "01GX4DRZH05TYHPV1DPF74P88W", "01GX4DRCZXER1W35BFAWG363TF", "01GX4DSAM3B298CNXK9JWTQCY4", "01GX4DWZMSN0RD52SK81007WG7", "01GWQDRYY9NS0JQYVF6N1NE2M0", "01GWQDS7KD74Z8J9H9VDPTG1MW", "01GWQDS8WNGFXHRJWKFVAVEY5N", "01GWQDSF3ZA2SDPSQ3V9F9H92Y", "01GX4DQP9EZ8F44NGXSVPQR3XN", "01GWQDSRARHTSH0QH7W8JDEEB0", "01GWQDM55EZMW4F451J2YCZZQ8", "01GWQSGXT1DTZVJR09HQBCEPED", "01GX48BPD5CEF1NS1MRRVKYA4A", "01GX48BPM5FAZW67DQPGQWJJKP", "01GX48C97Q1MQGQJM5N5S96KQA", "01GX48BPTXBAMZVWN7N1ZXWGZA", "01GX4DW2M77X3AA06NTCQS723S", "01GWQDN96738TDWYPHWBGE6Q83", "01GX4DSJ9Q041DFSEJBH0MFGZM", "01GX48D7AN4J02ASGBZ4WDMNYG", "01GX4DTCTB13YVPHFP1JVHSS1M", "01GWQDNWGMM9EFRG672FAPVBB6", "01GWQDFKYP6FYWTC8TCEFKCWTM", "01GX4DVYX2YHA5T0QB91W7D6NY", "01GWQDPYKPT05VNJQJ61N06QAB", "01GX4DW5846BHBZQYW8VFEVKZS", "01GX4DWN3AF1BR1AKJSY7SB74M", "01GX4DXD1RD3FVQ1ZMZGSMKDSD", "01GWQDKGGN721ZCGCDT8V1QJ8R", "01GWQDG073BAPASMNC6V17AKMD", "01GX4DVD1G1JAFKBF9Y9REGYA8", "01GWQDQCAPHWVPSY6S4M5ZBZ2Z", "01GWQDQM6XWK7SEENP6SP4SA3Z", "01GWQDQW2K0Q7TBTV7MBQBP0KK", "01GWQDRBKH73JCQ96P1HEKQWQS", "01GWQDQMTAYR710R3FFGK5EZNC", "01GX4DVNB4EC0W1BQCB9TMEM46", "01GX4DW2TS7TQNX4DCRWWHT0P2", "01GWQDGME19MSWCEKSYEW4R1S0", "01GWQDKQMG0JPQ05TGBX99QG0P", "01GWQDGMSME29CS687X6QVRNGJ", "01GWQDSY459DAWBDDV3HE2702D", "01GWQSGXXMVVAS4PDDE5WETRCN", "01GWQDMAQRY7J2V5FVD2CKCNQ1", "01GWQSH41HYTF2FTE7FE5W1GGS", "01GWQSH6PDR31ESPB4D66A1KJK", "01GX48C38H20M1WT0V415HXWNZ", "01GWQDMSE37SZQBZJKP8JT8G6G", "01GX48CGG6DFATEC1BMT0W9MHK", "01GX48D72ED7VN3X7DEYAB8DAS", "01GWQDN8ZT8TGADHV8ZPRKCHM9", "01GWQDHXYGTK8G7YHPH3NHJDSW", "01GX4DVN4NW8B6G4ZD47WPBPJ2", "01GX4DQ2FPQTFSB3X81Z6KK1S2", "01GWQDPBCEY0G1Q472D44HTVB8", "01GWQDQKXKXB2X49M6F179J4G6", "01GWQDQ5KTCXNAX7KD668JWSQT", "01GX4DP6EHKPJ0YNT20XQ2E697", "01GWQDQDK70RC95K9DCWB9ZTBF", "01GX4DQGSKA574M0SENZ1N6Q8M", "01GWQDR4878YJHCG90PECYN9RA", "01GWQDR56C3HFDYPMT7ZR2J2E1", "01GX4DQCDSZ04PQPC9HED1D9TE", "01GWQDRPABBCP1CW6BY384ST22", "01GWQDS8GK5ZM2S7J0BZMGZSFR", "01GWQDS97XAPKY19TH7W3HNSAF", "01GWQDSYCNCNVS55X7DPP50K5G", "01GWQDH62P06RJC1FJSHXMW8FX", "01GWQSH6Y0NT0G7KRSZXDV29GM", "01GWQSHG7ZC4HRBB3F85427HVM", "01GWQSHGVC6GJ66C2XK8X98DAR", "01GX48CTE6686HHVTX8RDG683Z", "01GWQDN8PTT7GYEW7H37WVNZY0", "01GX4DSHFTBF1MWQ4B4T2629ZC", "01GWQDHV9DN2DWBD1F52JSVZZQ", "01GX4DSQSVBRNDPZT8QJAA7JXT", "01GX4DSYKSJSSV7ABT3ME7SBN7", "01GX4DT63V0BE5EPMKTMDGVBGF", "01GWQDHWF106V4K6KZ1ZZF2S27", "01GWQDNPC5W1VBSNAP21YJ4C8Z", "01GWQDHXA7S4HQTNS6BQW7C0EC", "01GX4DVZ66TA2CQZYB6NPQSQM8", "01GWQDHYH2S8YGKG26JBF5N6ED", "01GWQDQCVTWKZ6975MB9CQSHHR", "01GWQDNXZRFQ68GWR1C245PQEP", "01GX4DVRQEE9EES5X50ECW782K", "01GX4DW8MPM1CCGWN0NM29W9S7", "01GX4DWS8RXVMYSWJ6A3HK0FD4", "01GX4DWZA1VNC141W8V5GC41SN", "01GX4DQH9TEMFX8AKNJ88Z27NJ", "01GWQDPXEZ5NDRX5V62CRYANNE", "01GX4DR17FW77ARWTF77TXMTWP", "01GWQDRCK7D4PX2HVT9XYSKEZV", "01GWQDK6DQQY1Y2CF06AW4FSG4", "01GX4DVS819JRNFA9WXBTRZAKD", "01GWQDS7TK3EGNS32DX2KJ1GNX", "01GWQDGN43BBFFZ9AKHBMS684S", "01GWQDSS0RDCT905VM4EBNJDFW", "01GWQDSY7593P6D7GW540HEH6S", "01GWQDKXWGBK2GQXMZENE3BXA8", "01GWQDT3ZE433YA7B4ZQQKPVX8", "01GWQDT41S2C8YQWT75D11TT1T", "01GWQSGRS9PKTC6WZBGVYPJ3HR", "01GX48BY8Y1HQZ0BF4T0ZBWPYE", "01GWQDHCBG5AJNEAMB2GQ5PR3C", "01GWQDN20KQ6EQXMXZECRX1YVD", "01GX4DSHVXSZJ1HMQVVZY0VEPN", "01GWQDEKDMWKDK25VXFDGXK9T3", "01GWQDFM13MQ5HRFZMNBWAPSG4", "01GWQDNQQBW2VGZ9QGGHWKFH3T", "01GWQDNWKY48MF51GN8P8ZG0J2", "01GWQDPAM1WAX8S4XDASEF0K57", "01GWQDHZFFNFVJ3Q4BMPGFY3P9", "01GWQDJ5Q6PRTJ2T314PDNF50V", "01GX4DQCA2W6M0601E9Y54DS8Z", "01GX4DQWV1H2P23JQWMKNDJWYP", "01GX4DR14ZSPXMT4EP7RPNHTGJ", "01GWQDRCGN38Y6CCRJJPE3C27Z", "01GX4DSJFW9724Q0X036D4HHM2", "01GWQDRPWX1DRQ0S3N8G3BGCX4", "01GWQDK85EAYKH6SZGPMZ0Y70G", "01GWQDGFP0T6213AG6RVR3BKA1", "01GWQDKQWE2FP9H99A32FX494Q", "01GWQDSF6GSM2T7ZJWYA9P7ZK4", "01GWQ0XJQ3A9X4XPGMGA5ANYJA", "01GWQDKRDQN3EQXCWWWJ23K0KN", "01GWQDKX3TZJ45Y20PGNCPRANZ", "01GWQDGY1YJMB2KH24RXR702HW", "01GWQDT3VHN4A78E2YPWMJA24D", "01GWQDM5CDSW1N6S6FG87DR20B", "01GWQSH4C25YQCPVGSDX3MY3SF", "01GWQDMBP9P5F7V1D4ACZGBF5H", "01GWQDQ69FJCPGCYVEABGWA8CR", "01GWQDMC3YHNVAS28BY6DTN2D4", "01GWQDMJ9KBM7BTN9YQ12V3JSR", "01GWQDMSYP0JQKR3B6VM12V46W", "01GWQDHC4B3NZB1EKAFQEJNXEH", "01GX48CHE06684TZ30KPSYD4BJ", "01GWQDN2E88Y6S2WYDJHGWCADX", "01GWQDN9GRA8HMAT8WFG0PB3FX", "01GWQDHVQ0RKDR9TRQKFYSNRYV", "01GWQDNFS9X0V3FTFSFESNF4KY", "01GWQDHW78533JXFVDPFVJ2N9M", "01GWQDFFB88YZ9QWGK63B4RKQ3", "01GWQDNP5WYN7151SHD5X4QP2Y", "01GX4DTQN0QSZ6AR4B62F2S85G", "01GWQDNXCZDQP8RK5THARBVYFZ", "01GWN9GRYPG2AZ6JEYMWGC0YMZ", "01GWQDFMFAX3MBGH2YEXD4TSB8", "01GWQDJ63Y5TPBMEHX4HH1E6Y9", "01GWQDG00Z59XW8QF3WQ4BRAVT", "01GX4DNRPEB6P4KZ1AMM7C84P4", "01GWQDPYBVMGVBB5DQHC9YSVQ7", "01GWQDPY8NSS56XM05W5R6FH6S", "01GWQDKH0ZA7G4BHEEQ6Z4T8BX", "01GWQDPZ4FVQSYGZN7JDJCS8ZZ", "01GWQDQ5VFBV8G9VMESZFFRF6D", "01GWN9Z9ET0AKJAKF4X8MNS7WA", "01GX4DRCHYJ1DE71B3KX9NFC11", "01GWQDKHKBB6Q9896NMM66DPGH", "01GWQDRYNNAV0RTWT40AFBQT2E", "01GWQDSFNPWA1R0WD5RAT0W4GP", "01GX4DNRTWTEB6XXZENZZSBGHQ", "01GWQDF0H9A3WBHHVXWGCGECZQ", "01GWQDGYQJF5XR67C271M89KGE", "01GWQSGXQ0BHAEXQF5F3QCT48N", "01GWQDMAV14Z4B2J66KHYJNGSN", "01GWQDN0YQSKX0V013EKEJF9FV", "01GWN9ZA8GNXSK6P2HCWYFWD92", "01GWQDHWNM63430J3BFSK052KD", "01GWQDHZA9D4R09FP96Q3JBK6R", "01GX4DWZFR3NMCKZFE0DTXJW6Z", "01GWQDJAJKNPJ3985PZD25ZHCE", "01GX4DPFJEPF7QPSM0AX7J8HJF", "01GWQDQDDE9R80ESK7EG7ZQ9C0", "01GWQDK73ZXD68BHCZWRJPVCCG", "01GX4DT82SVM55QE4BS1YSF7T0", "01GWQDRYR31CPX50JEMZ8KNAG4", "01GWQDRPMFZJ3QSKHEFHD0XZWC", "01GWQDKR06YKC8E4QTP6T5D1TF", "01GWQDGMWK1CWW415J8MHWHKXG", "01GWQDT3J6EFMQE7N1S9HYSVYS", "01GWQSGS9VEK1V6FZHSAXRJJ1N", "01GWQSHRB2HRJ6NEWBDETSN0EF", "01GWQDMRRJTZSPYMPW6M56HNPX", "01GX48DD2KF0N1RDGS4ERYTCDM", "01GX4DTCX57X55G4H91CG29338", "01GX4DTJDPB4EPMYSYSQ5MCNGT", "01GWQDHZCX3RX8EXN5BQZY6V4F", "01GWQDP5N7HXMAQJ694PKTV433", "01GWQDJHXM095QJ0HDM545TFR4", "01GWQDPARB6RN2BF61PGRSK40Z", "01GWQDPG3X77TG9C2GV5QA7DV6", "01GX4DXHYFE36BCC77YD1SGW5X", "01GWQDPXMARBD94G4W66T99KS2", "01GX4DP5ZW25ZZRNZAQGQ3ZYGX", "01GX4DPB379GZYG2GM4T8EC737", "01GX4DPF388NHXF9B1QR3185HB", "01GWQDQ6DS6WBWEYK7VTSYPQ6N", "01GX4DPKSPWF7V626JP71812CM", "01GX4DPS7QYE8PNA711MD0YSRB", "01GX4DPXVDHN1Z4PDYR8723ZM3", "01GWQDQCKG4934MBYZGTDTFCQW", "01GX4DQ7JN0EAQ89BQK013SKGM", "01GX4DQ2K4SMYH1KHRNKWCCZNB", "01GX4DQ26KADX4X5Y9NJBBMNBJ", "01GX4DQBSMV2EEH9EWJY2Z0D6F", "01GX4DQNE93R4M23AVCCYJ5BT8", "01GWQDG85WEY1GW90GFA7CXH7C", "01GX4DQWR0FANYXEGMYZ85RTC4", "01GWQDK6PJCJXZ8785WAXWFT13", "01GWQDR4FG70J78VBH7T1T8G38", "01GX4DT03089W6ZW1W1PZGPD7J", "01GWQDRYK07C4SR3WG811NR8AT", "01GWNGXDD01CMVFH1EJCTB2XHY", "01GWQDSGJ5Z23SC4T1YH9ZSHYN", "01GWQDSR5YMY0BMN9V6BA8YJ9J", "01GWQDSYA1YKXDKJ7B6T6EG7J5", "01GWQDH682V2WWSKN882PATDJ6", "01GX48D7JP7EB5ZGJJJ9ESMPEY", "01GWQDFEYQVEAP29DBACSMCMYD", "01GWQDFETNSYDE6ATS1VJF9AHN", "01GX4DTPYV0GWHJR6R3ZS6YG42", "01GX4DTJJK2AP7TRNVVD3SDWB1", "01GWQDNQC7WK2TN5ZXB08RB8FD", "01GWQDP4AQERY9ZDAPMBJCCZYS", "01GWQDPAE45AGQCNMADQ9AT7TC", "01GWQDPPVNTBZC145HG3N4J7SX", "01GWQDJC7VA7AAK39WMBMT9640", "01GX4DPSM4WCMKQJ6BP44AJFPM", "01GX4DQ7P0H02SHFKHQEWJAXK6", "01GX4DQGFV728DGVJBW5XG3SBF", "01GWQDG8NGTWT41WT7NP7J58YB", "01GX4DQW6A49EG87ZWEV25T7G3", "01GWQDQVVEKXV52NA3JKAQ2A4R", "01GX4DTJT7GBTEJMRT7PW6GA1X", "01GWQDRNW858E9W1K7WD6WM3VP", "01GWQDK8TEKDV2EH32EAGQQ8NE", "01GWQDSFSEM3BGYWQFR143SQAQ", "01GWQDKXH1F6T0CY8DTEPKX00S", "01GWQDSYMFP17WY058Z2T4ZR5Y", "01GWQDM5QJCJEQ0MDZ0G6KBRK6", "01GWQSHMANZN87DH94QTCGDPKZ", "01GWQSHR4N58TGJTCNAS86QV93", "01GWQDMJFQ0N6Z1PTPTH14BDAQ", "01GX4DVC1A4D9V969BCGX5AVCQ", "01GWQDFMHR1X0N1SHVP57S92QG", "01GX4DVYQV3RA2QEE23JXD194C", "01GX4DWFFVHZCJMEX43V872XDN", "01GWQDPG1160KAEBYQAY5NH6EH", "01GX4DWT5EJQ936YYBN207229J", "01GWQDQ6Q7RFM0P021SNQX3VH9", "01GWQDQKMP748QH215VMPN7RJ8", "01GX4DRC0CQ0JP1VCT4PVZE8FQ", "01GWQDGMKA81TE7ZE7T3GJSEZK", "01GWQDT3N5Y48FS2Z36M76THQJ", "01GWQDGYDKWT8DWH85X4666T9F", "01GWQSHREGJTFZ0J9GVMJWNN94", "01GWQDNGVG7CD3BBG3EFMA8RW6", "01GX4DVMX28AS5QW1FX21Z3NTV", "01GX4DVH1NGNGVRYWFQJ8XK497", "01GX4DWMXGE61PTATX1VW1PGC9", "01GWQDPFKDXCPWR9EF1QHZCBPX", "01GX4DXE1NSJ91FDQJ9QWA8R8W", "01GWQDJ00CPNEX92YCASVDVF0E", "01GX4DXF99WBGJM5WDKSECWNR9", "01GX4DP1BGGHBV9TG7YW4T251G", "01GX4DP2CCD0RWGBAXX483KRBT", "01GWQDJHH62HDXZ99PDPJ8DAS6", "01GX4DRRWQWGQCEH943GECWYE6", "01GX4DRJ205DXMGNX3QX6Z0SNZ", "01GX4DS60Z567SK202AKXXN8A8", "01GWQSH77MNP1DG2603510P3VZ", "01GWQDGZJM9SPCZWNRM9CYAWQM", "01GWQDH751BJ3ECZN3PVM6K0E6", "01GWQDKGWB2VA7MJF0XVQMZZAE", "01GWQDNA0CWNXYKDA53TWQV7YW", "01GX4DSRDV2M998N1C45F78R90", "01GX4DT6HJ3Z4TFBKW0DH4BRYS", "01GX4DSZXX620CQ8X2FRQA34CG", "01GX4DRRS2FA743B2KMVFTT3C9", "01GWQ0XJZHZ7JMQSCQ7TV9DV9F", "01GX4DV4RHX7RCWDNQ6SV5ZTN9", "01GX4DV7CSXFT65KRD80YMCR29", "01GX4DVVNJPDXG2MY7BPG2SN52", "01GX4DVRDM6XMAMV7T7K2S0FVK", "01GX4DW29DRRMV923Y0NS77VZ5", "01GX4DVYGHY5C54V6Z8Y4SP8CX", "01GX4DW8CKRDP170VYEF53D3NR", "01GX4DW50E05T6X49B3E2A5P1H", "01GWQDPB0ARXABK52YSJG716GC", "01GX4DXEHHM1XS0C2G7YQ0E40G", "01GX4DXGKFQW3Z5P18PK6ZA14F", "01GX4DNRKTM5VQG89NRYV3ZBFE", "01GX4DP25WSRE2HE4HGS5ZM0K4", "01GX4DP1NM14QARC4H0MJ05ZJW", "01GWQDG0QM566P1GDAK23QTK4G", "01GWQDQ6YTFZKM3GK28HJG08AZ", "01GWQDJK9V898REVBMXDHGTD3V", "01GWQDF81D98HHKE0Y66SY4069", "01GX4DR70BR3S7N29BNMSYMH8W", "01GX4DRRZRFMH5YXJDP7J20YJK", "01GX4DS4ZRZJWPHKP0GZ2BBNFY", "01GWQDRC0X0376XXT98169DCY0", "01GWQDK6HFBJ8FGPTXJA2M8ZNA", "01GWQDS0J3WV8W11NJE4FK3745", "01GWQDH6YGX46SN2WXHPSWJS9A", "01GX4DSRA9MVSBWFW2N5YNMDFM", "01GX4DSR7CW7CJBAWM01YZYKPG", "01GX4DV5Z860AX5KXF9SPGM56Y", "01GX4DV5S43GHM7X9PDF5VXYQT", "01GX4DV5FS4YY7Z5M1VBN6ZFPP", "01GX4DV6VXZB052G818H6RZBD8", "01GX4DV775KNSCFFXXGWFJ6HRA", "01GX4DV6FP1MECBCVKAVA6BWJ1", "01GX4DV58V2ZC39AZ6FVX497CN", "01GX4DV7K12MJMMJD88G8N07MG", "01GWQDP3ZH91CEYFC0N68N11EN", "01GWQDP588XQDHPS5HAV8AQVTA", "01GWQDPPYDAC041XY3HQGR5MZD", "01GWQDPY17BJ8Y1QYJ061BEJZY", "01GX4DR6GRW3X68S5QD2RSN7PB", "01GX4DS5BYSC1D159901R7XHTR", "01GWQDG88E6HCXHM2AAQ1FCVTV", "01GWQDSRY60V4ZSDP3V8CA2365", "01GWQDH6TQPGMPZV5KFPK7MR0B", "01GWQDMJ1ZCY7A3603TJPZFQTT", "01GWQDFFF1DYCMVJG6XAN9QF3Y", "01GWN9GS3TH1QDBQQB3NHRECVF", "01GX4DV4DSZ9CYF2PGAXCNYERQ", "01GX4DXG52825Y0WQFX3CWM69G", "01GX4DNRGMJN2JXMEWQ7M0AWSF", "01GX4DXHJFTB4RT8MFC1E99D93", "01GX4DP0V5XDGRS0CJ4R7QQKSE", "01GX4DRHTRSBN339RBYBNJZ2R6", "01GWQDRDAGC9YNXHN5JXP98KV9", "01GWQDJH7A8ZF7PZ2P7WTAKWFN", "01GWQDMBH160660QMQXMKEJ1AR", "01GWQSHGH5CNK2R4BSKPFFZHK6", "01GX4DRRB7HQA2Q6JPZJJNGAY9", "01GWQDPQC21GSTAJ0P12PX0X7W", "01GWQDR45T93K4C4NBF6SE759R", "01GWQDSYYKW2WF3D8D233EZW64", "01GX4DSZ44AVV62HAANNFN9TWV", "01GWQDHCPHM5AM16W0YHY4PTKW", "01GX4DRZ1B7QVZREFRPARVRNBX", "01GWQDK92K3QTKZY175Q0GDP6W", "01GWQDH6MHPFQZKQ9KW16QPR2B", "01GWQDMS4YKJAH5PGSD0ZJVVPE", "01GX4DTJ7T5RD9YTSD0629KNBE", "01GWQDNX3S50AMP5EEA1H7WNXE", "01GX4DXH2M8RKDPKH4HBHP00MK", "01GX4DXFNGKYKFSVRM8R938AGR", "01GX4DXERBSNZYR4X61M4EBWAK", "01GX4DXJ2JK3Z4BPJHEZGF0FX5", "01GWQSH9RD1QAYVJFQ7M9GK52D", "01GWQDM52TG0X5QJRYAFQAVK93", "01GWQDJBDTGT51XA9VEPECPDNK", "01GWQDSES5F9CWBXG72TSK1RSK", "01GWQDNPRHHCSNVA1V13JRFJMC", "01GWQDFF4HQGBQ2J2YBK2GVKAE", "01GX4DSZC5FSGW269K32VFMS8M", "01GWQDJATHGE13SBKE6ED10MJ5", "01GX4DWZD3G77FZJW1NTN4T0Y2", "01GX4DSZHX9Y1J2AK1SYXQ77M8", "01GWQDN9Q4XA0HP2ZKNTTSVD1B", "01GWQDEKVAGMGS8Z6CFCTNDXJ1", "01GX4DVZC5TH7G776MBXHBPEVE", "01GWQDEMW05AVEB0YF5J28P0C6",]
for id in ids:
    pcone._index.update(id, set_metadata={
        'owner': 'google-oauth2|108573573074253667565'
    })
# openai = OpenAI('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')
# embedding = openai.embed('This is a test')
# neighbors = pcone.query(embedding=embedding, query_filter=QueryFilter(owner='test_user'))
# print(neighbors[0].get('metadata') if neighbors else None)